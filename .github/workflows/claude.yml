name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run specific commands for this RAG chatbot project
          allowed_tools: "Bash(uv sync),Bash(uv run *),Bash(./scripts/*),Bash(chmod +x *)"
          
          # Custom instructions for this RAG chatbot codebase
          custom_instructions: |
            This is a RAG (Retrieval-Augmented Generation) chatbot system built with FastAPI backend and vanilla JavaScript frontend.
            
            Key project context:
            - Python 3.13+ with uv package manager for dependency management
            - FastAPI backend with ChromaDB vector store and Anthropic Claude integration
            - Vanilla JS frontend with markdown rendering
            - Uses sentence-transformers for embeddings
            
            Development practices:
            - Always use type hints in Python code
            - Run quality checks with ./scripts/quality.sh before committing
            - Use uv for all Python dependency management (uv sync, uv run)
            - Follow existing code patterns and architecture
            - Test changes using ./run.sh for quick startup
            
            Architecture components:
            - RAG System (rag_system.py): Main orchestrator
            - Document Processor: Handles PDF/DOCX/TXT parsing
            - Vector Store: ChromaDB integration with persistence
            - AI Generator: Claude API integration with tool support
            - Session Manager: Conversation history tracking
            
            When making changes:
            - Understand the modular architecture before modifying
            - Follow existing patterns for new components
            - Consider impact on document processing and vector storage
            - Test with sample documents in docs/ folder
            - Ensure session management works correctly
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test